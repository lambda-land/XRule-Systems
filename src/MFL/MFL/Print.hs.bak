-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for MFL.

module MFL.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified MFL.Abs
import qualified Data.Text

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print MFL.Abs.TokUnit where
  prt _ (MFL.Abs.TokUnit (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print MFL.Abs.UIdent where
  prt _ (MFL.Abs.UIdent (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print MFL.Abs.PIdent where
  prt _ (MFL.Abs.PIdent (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print MFL.Abs.PInteger where
  prt _ (MFL.Abs.PInteger (_,i)) = doc $ showString (Data.Text.unpack i)
instance Print (MFL.Abs.SCPL' a) where
  prt i = \case
    MFL.Abs.SCPLPROG _ defns -> prPrec i 0 (concatD [prt 0 defns])

instance Print [MFL.Abs.Defn' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (MFL.Abs.Defn' a) where
  prt i = \case
    MFL.Abs.DEFN _ pident stmt -> prPrec i 0 (concatD [prt 0 pident, doc (showString "="), prt 1 stmt])

instance Print (MFL.Abs.Stmt' a) where
  prt i = \case
    MFL.Abs.CASESTMT _ exp caseterms -> prPrec i 2 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), doc (showString "{"), prt 0 caseterms, doc (showString "}")])
    MFL.Abs.IFSTMT _ exp stmt1 stmt2 -> prPrec i 2 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 2 stmt1, doc (showString "else"), prt 2 stmt2])
    MFL.Abs.BARESTMT _ exp -> prPrec i 2 (concatD [prt 0 exp])
    MFL.Abs.ELet _ let_ letinstmt stmt -> prPrec i 1 (concatD [prt 0 let_, prt 0 letinstmt, doc (showString "in"), prt 1 stmt])

instance Print (MFL.Abs.Let' a) where
  prt i = \case
    MFL.Abs.LET _ -> prPrec i 0 (concatD [doc (showString "let")])
    MFL.Abs.LRec _ -> prPrec i 0 (concatD [doc (showString "letrec")])

instance Print (MFL.Abs.CaseTerm' a) where
  prt i = \case
    MFL.Abs.CASE_STMT _ casepattern stmt -> prPrec i 0 (concatD [prt 0 casepattern, doc (showString "->"), prt 1 stmt])

instance Print (MFL.Abs.LetInStmt' a) where
  prt i = \case
    MFL.Abs.LET_IN_STMT _ pident exp -> prPrec i 0 (concatD [prt 0 pident, doc (showString "="), prt 0 exp])

instance Print (MFL.Abs.Type' a) where
  prt i = \case
    MFL.Abs.TYPEARROW _ typen type_ -> prPrec i 0 (concatD [prt 0 typen, doc (showString "->"), prt 0 type_])
    MFL.Abs.TYPENext _ typen -> prPrec i 0 (concatD [prt 0 typen])

instance Print (MFL.Abs.TypeN' a) where
  prt i = \case
    MFL.Abs.TYPEUNIT _ tokunit -> prPrec i 0 (concatD [prt 0 tokunit])
    MFL.Abs.TYPECONST_VAR _ uident -> prPrec i 0 (concatD [prt 0 uident])
    MFL.Abs.TYPELIST _ type_ -> prPrec i 0 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    MFL.Abs.TYPEPROD _ types -> prPrec i 0 (concatD [doc (showString "<"), prt 0 types, doc (showString ">")])
    MFL.Abs.TYPEBRACKET _ type_ -> prPrec i 0 (concatD [doc (showString "("), prt 0 type_, doc (showString ")")])
    MFL.Abs.CONST_TYPE _ constanttype -> prPrec i 0 (concatD [prt 0 constanttype])

instance Print [MFL.Abs.TypeN' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [MFL.Abs.Type' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [MFL.Abs.UIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (MFL.Abs.CasePattern' a) where
  prt i = \case
    MFL.Abs.TRUE_PATTERN _ -> prPrec i 0 (concatD [doc (showString "True")])
    MFL.Abs.FALSE_PATTERN _ -> prPrec i 0 (concatD [doc (showString "False")])

instance Print [MFL.Abs.CaseTerm' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print (MFL.Abs.Exp' a) where
  prt i = \case
    MFL.Abs.EInt _ pinteger -> prPrec i 15 (concatD [prt 0 pinteger])
    MFL.Abs.ETrue _ -> prPrec i 15 (concatD [doc (showString "True")])
    MFL.Abs.EFalse _ -> prPrec i 15 (concatD [doc (showString "False")])
    MFL.Abs.EVar _ pident -> prPrec i 15 (concatD [prt 0 pident])
    MFL.Abs.EString _ str -> prPrec i 15 (concatD [printString str])
    MFL.Abs.EList _ exps -> prPrec i 15 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    MFL.Abs.ECall _ pident exps -> prPrec i 15 (concatD [prt 0 pident, doc (showString "("), prt 0 exps, doc (showString ")")])
    MFL.Abs.ENeg _ exp -> prPrec i 13 (concatD [doc (showString "-"), prt 14 exp])
    MFL.Abs.CONSTERM _ exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString ":"), prt 14 exp2])
    MFL.Abs.EAPPEND _ exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "++"), prt 13 exp2])
    MFL.Abs.EMul _ exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    MFL.Abs.EDiv _ exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    MFL.Abs.EAdd _ exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    MFL.Abs.ESub _ exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    MFL.Abs.ELt _ exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    MFL.Abs.EGt _ exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    MFL.Abs.ELEq _ exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    MFL.Abs.EGEq _ exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    MFL.Abs.EEq _ exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    MFL.Abs.ENEq _ exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    MFL.Abs.EAnd _ exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    MFL.Abs.EOr _ exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    MFL.Abs.ELambda _ pidents stmt -> prPrec i 1 (concatD [doc (showString "\\"), prt 0 pidents, doc (showString "->"), prt 1 stmt])

instance Print [MFL.Abs.PIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x, doc (showString " ")]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print (MFL.Abs.TypeAnnotation' a) where
  prt i = \case
    MFL.Abs.TYPEANNOTATION _ type_ -> prPrec i 0 (concatD [doc (showString "::"), prt 0 type_])
    MFL.Abs.TYPEANNOTATION_EMPTY _ -> prPrec i 0 (concatD [])

instance Print [MFL.Abs.Exp' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (MFL.Abs.ConstantType' a) where
  prt i = \case
    MFL.Abs.INTEGER _ pinteger -> prPrec i 0 (concatD [prt 0 pinteger])
    MFL.Abs.STRING _ str -> prPrec i 0 (concatD [printString str])
    MFL.Abs.CHAR _ c -> prPrec i 0 (concatD [prt 0 c])
    MFL.Abs.DOUBLE _ d -> prPrec i 0 (concatD [prt 0 d])
