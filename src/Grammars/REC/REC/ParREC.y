-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module REC.ParREC
  ( happyError
  , myLexer
  , pExp
  ) where

import Prelude

import qualified REC.AbsREC
import REC.LexREC

}

%name pExp Exp
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1) }
  ')'      { PT _ (TS _ 2) }
  '*'      { PT _ (TS _ 3) }
  '+'      { PT _ (TS _ 4) }
  ','      { PT _ (TS _ 5) }
  '='      { PT _ (TS _ 6) }
  'in'     { PT _ (TS _ 7) }
  'let'    { PT _ (TS _ 8) }
  'rec'    { PT _ (TS _ 9) }
  L_Ident  { PT _ (TV $$)  }
  L_integ  { PT _ (TI $$)  }

%%

Ident :: { REC.AbsREC.Ident }
Ident  : L_Ident { REC.AbsREC.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Exp2 :: { REC.AbsREC.Exp }
Exp2 : Integer { REC.AbsREC.EInt $1 } | '(' Exp ')' { $2 }

Exp1 :: { REC.AbsREC.Exp }
Exp1 : Exp1 '*' Exp2 { REC.AbsREC.ETimes $1 $3 } | Exp2 { $1 }

Exp :: { REC.AbsREC.Exp }
Exp
  : Exp '+' Exp1 { REC.AbsREC.EPlus $1 $3 }
  | Exp1 { $1 }
  | 'let' 'rec' Ident ListIdent '=' Exp 'in' Exp { REC.AbsREC.LetRec $3 $4 $6 $8 }

ListIdent :: { [REC.AbsREC.Ident] }
ListIdent
  : {- empty -} { [] }
  | Ident { (:[]) $1 }
  | Ident ',' ListIdent { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

