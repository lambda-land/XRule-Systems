-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from REC/ParREC.y
-----------------------------------------------------------------------------

state 25 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	Exp2 -> Integer                                    (3)
	Exp2 -> '(' Exp ')'                                (4)
	Exp1 -> Exp1 '*' Exp2                              (5)
	Exp1 -> Exp2                                       (6)
	Exp -> Exp '+' Exp1                                (7)
	Exp -> Exp1                                        (8)
	Exp -> 'let' 'rec' Ident ListIdent '=' Exp 'in' Exp   (9)
	ListIdent ->                                       (10)
	ListIdent -> Ident                                 (11)
	ListIdent -> Ident ',' ListIdent                   (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'='            { PT _ (TS _ 6) }
	'in'           { PT _ (TS _ 7) }
	'let'          { PT _ (TS _ 8) }
	'rec'          { PT _ (TS _ 9) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	Ident           rule  1
	Integer         rule  2
	Exp2            rules 3, 4
	Exp1            rules 5, 6
	Exp             rules 7, 8, 9
	ListIdent       rules 10, 11, 12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 7
	'let'          shift, and enter state 8
	L_integ        shift, and enter state 9

	Integer        goto state 3
	Exp2           goto state 4
	Exp1           goto state 5
	Exp            goto state 6

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	','            reduce using rule 1
	'='            reduce using rule 1
	L_Ident        reduce using rule 1


State 3

	Exp2 -> Integer .                                   (rule 3)

	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	'in'           reduce using rule 3
	%eof           reduce using rule 3


State 4

	Exp1 -> Exp2 .                                      (rule 6)

	')'            reduce using rule 6
	'*'            reduce using rule 6
	'+'            reduce using rule 6
	'in'           reduce using rule 6
	%eof           reduce using rule 6


State 5

	Exp1 -> Exp1 . '*' Exp2                             (rule 5)
	Exp -> Exp1 .                                       (rule 8)

	')'            reduce using rule 8
	'*'            shift, and enter state 13
	'+'            reduce using rule 8
	'in'           reduce using rule 8
	%eof           reduce using rule 8


State 6

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '+' Exp1                               (rule 7)

	'+'            shift, and enter state 12
	%eof           accept


State 7

	Exp2 -> '(' . Exp ')'                               (rule 4)

	'('            shift, and enter state 7
	'let'          shift, and enter state 8
	L_integ        shift, and enter state 9

	Integer        goto state 3
	Exp2           goto state 4
	Exp1           goto state 5
	Exp            goto state 11

State 8

	Exp -> 'let' . 'rec' Ident ListIdent '=' Exp 'in' Exp    (rule 9)

	'rec'          shift, and enter state 10


State 9

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	'in'           reduce using rule 2
	%eof           reduce using rule 2


State 10

	Exp -> 'let' 'rec' . Ident ListIdent '=' Exp 'in' Exp    (rule 9)

	L_Ident        shift, and enter state 2

	Ident          goto state 17

State 11

	Exp2 -> '(' Exp . ')'                               (rule 4)
	Exp -> Exp . '+' Exp1                               (rule 7)

	')'            shift, and enter state 16
	'+'            shift, and enter state 12


State 12

	Exp -> Exp '+' . Exp1                               (rule 7)

	'('            shift, and enter state 7
	L_integ        shift, and enter state 9

	Integer        goto state 3
	Exp2           goto state 4
	Exp1           goto state 15

State 13

	Exp1 -> Exp1 '*' . Exp2                             (rule 5)

	'('            shift, and enter state 7
	L_integ        shift, and enter state 9

	Integer        goto state 3
	Exp2           goto state 14

State 14

	Exp1 -> Exp1 '*' Exp2 .                             (rule 5)

	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	'in'           reduce using rule 5
	%eof           reduce using rule 5


State 15

	Exp1 -> Exp1 . '*' Exp2                             (rule 5)
	Exp -> Exp '+' Exp1 .                               (rule 7)

	')'            reduce using rule 7
	'*'            shift, and enter state 13
	'+'            reduce using rule 7
	'in'           reduce using rule 7
	%eof           reduce using rule 7


State 16

	Exp2 -> '(' Exp ')' .                               (rule 4)

	')'            reduce using rule 4
	'*'            reduce using rule 4
	'+'            reduce using rule 4
	'in'           reduce using rule 4
	%eof           reduce using rule 4


State 17

	Exp -> 'let' 'rec' Ident . ListIdent '=' Exp 'in' Exp    (rule 9)

	'='            reduce using rule 10
	L_Ident        shift, and enter state 2

	Ident          goto state 18
	ListIdent      goto state 19

State 18

	ListIdent -> Ident .                                (rule 11)
	ListIdent -> Ident . ',' ListIdent                  (rule 12)

	','            shift, and enter state 21
	'='            reduce using rule 11


State 19

	Exp -> 'let' 'rec' Ident ListIdent . '=' Exp 'in' Exp    (rule 9)

	'='            shift, and enter state 20


State 20

	Exp -> 'let' 'rec' Ident ListIdent '=' . Exp 'in' Exp    (rule 9)

	'('            shift, and enter state 7
	'let'          shift, and enter state 8
	L_integ        shift, and enter state 9

	Integer        goto state 3
	Exp2           goto state 4
	Exp1           goto state 5
	Exp            goto state 23

State 21

	ListIdent -> Ident ',' . ListIdent                  (rule 12)

	'='            reduce using rule 10
	L_Ident        shift, and enter state 2

	Ident          goto state 18
	ListIdent      goto state 22

State 22

	ListIdent -> Ident ',' ListIdent .                  (rule 12)

	'='            reduce using rule 12


State 23

	Exp -> Exp . '+' Exp1                               (rule 7)
	Exp -> 'let' 'rec' Ident ListIdent '=' Exp . 'in' Exp    (rule 9)

	'+'            shift, and enter state 12
	'in'           shift, and enter state 24


State 24

	Exp -> 'let' 'rec' Ident ListIdent '=' Exp 'in' . Exp    (rule 9)

	'('            shift, and enter state 7
	'let'          shift, and enter state 8
	L_integ        shift, and enter state 9

	Integer        goto state 3
	Exp2           goto state 4
	Exp1           goto state 5
	Exp            goto state 25

State 25

	Exp -> Exp . '+' Exp1                               (rule 7)
	Exp -> 'let' 'rec' Ident ListIdent '=' Exp 'in' Exp .    (rule 9)

	')'            reduce using rule 9
	'+'            shift, and enter state 12
			(reduce using rule 9)

	'in'           reduce using rule 9
	%eof           reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 11
Number of non-terminals: 7
Number of states: 26
