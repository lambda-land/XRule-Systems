-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelParser where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsParser

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transTokUnit :: AbsParser.TokUnit -> Result
transTokUnit x = case x of
  AbsParser.TokUnit string -> failure x

transUIdent :: AbsParser.UIdent -> Result
transUIdent x = case x of
  AbsParser.UIdent string -> failure x

transPIdent :: AbsParser.PIdent -> Result
transPIdent x = case x of
  AbsParser.PIdent string -> failure x

transPInteger :: AbsParser.PInteger -> Result
transPInteger x = case x of
  AbsParser.PInteger string -> failure x

transSCPL :: AbsParser.SCPL -> Result
transSCPL x = case x of
  AbsParser.SCPLPROG defns -> failure x

transDefn :: AbsParser.Defn -> Result
transDefn x = case x of
  AbsParser.DEFN pident stmt -> failure x

transStmt :: AbsParser.Stmt -> Result
transStmt x = case x of
  AbsParser.CASESTMT exp caseterms -> failure x
  AbsParser.IFSTMT exp stmt1 stmt2 -> failure x
  AbsParser.BARESTMT exp -> failure x
  AbsParser.ELet let_ letinstmt stmt -> failure x

transLet :: AbsParser.Let -> Result
transLet x = case x of
  AbsParser.LET -> failure x
  AbsParser.LRec -> failure x

transCaseTerm :: AbsParser.CaseTerm -> Result
transCaseTerm x = case x of
  AbsParser.CASE_STMT casepattern stmt -> failure x

transLetInStmt :: AbsParser.LetInStmt -> Result
transLetInStmt x = case x of
  AbsParser.LET_IN_STMT pident exp -> failure x

transType :: AbsParser.Type -> Result
transType x = case x of
  AbsParser.TYPEARROW typen type_ -> failure x
  AbsParser.TYPENext typen -> failure x

transTypeN :: AbsParser.TypeN -> Result
transTypeN x = case x of
  AbsParser.TYPEUNIT tokunit -> failure x
  AbsParser.TYPECONST_VAR uident -> failure x
  AbsParser.TYPELIST type_ -> failure x
  AbsParser.TYPEPROD types -> failure x
  AbsParser.TYPEBRACKET type_ -> failure x
  AbsParser.CONST_TYPE constanttype -> failure x

transCasePattern :: AbsParser.CasePattern -> Result
transCasePattern x = case x of
  AbsParser.TRUE_PATTERN -> failure x
  AbsParser.FALSE_PATTERN -> failure x

transExp :: AbsParser.Exp -> Result
transExp x = case x of
  AbsParser.EInt pinteger -> failure x
  AbsParser.ETrue -> failure x
  AbsParser.EFalse -> failure x
  AbsParser.EVar pident -> failure x
  AbsParser.EString string -> failure x
  AbsParser.EList exps -> failure x
  AbsParser.ECall pident exps -> failure x
  AbsParser.ENeg exp -> failure x
  AbsParser.CONSTERM exp1 exp2 -> failure x
  AbsParser.EAPPEND exp1 exp2 -> failure x
  AbsParser.EMul exp1 exp2 -> failure x
  AbsParser.EDiv exp1 exp2 -> failure x
  AbsParser.EAdd exp1 exp2 -> failure x
  AbsParser.ESub exp1 exp2 -> failure x
  AbsParser.ELt exp1 exp2 -> failure x
  AbsParser.EGt exp1 exp2 -> failure x
  AbsParser.ELEq exp1 exp2 -> failure x
  AbsParser.EGEq exp1 exp2 -> failure x
  AbsParser.EEq exp1 exp2 -> failure x
  AbsParser.ENEq exp1 exp2 -> failure x
  AbsParser.EAnd exp1 exp2 -> failure x
  AbsParser.EOr exp1 exp2 -> failure x
  AbsParser.ELambda pidents stmt -> failure x

transTypeAnnotation :: AbsParser.TypeAnnotation -> Result
transTypeAnnotation x = case x of
  AbsParser.TYPEANNOTATION type_ -> failure x
  AbsParser.TYPEANNOTATION_EMPTY -> failure x

transConstantType :: AbsParser.ConstantType -> Result
transConstantType x = case x of
  AbsParser.INTEGER pinteger -> failure x
  AbsParser.STRING string -> failure x
  AbsParser.CHAR char -> failure x
  AbsParser.DOUBLE double -> failure x
